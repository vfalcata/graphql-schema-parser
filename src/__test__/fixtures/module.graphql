"""
Make a Query
"""
extend type Query implements dog & cat  @include1(if:boolean) @exclude1(if:[boolean!]!) {
    """
    gets the users
    """
    users(
        "string to specify user"
        query: String
        ): [User!]! @include2(if:boolean @require1)
    """
    gets the posts 
    """
    posts(
        "is it available"
        available: Boolean @include3(if:boolean @authenticate1(email:String, password:String @exclude2(if:[boolean!]!)), from5:String @now1 @then1)
        "make a query string for posts"
        query: String @authenticate2(email:String, password:String)
        ): [Post!]! @include4(if:boolean)
    """
    gets the comments
    """
    comments: [Comment!]! @authenticate3(email:String @require2, password:String @require3) @include5(if:boolean)
    """
    gets the current user
    """
    me: User! @last1 @second1 @third(amount:Int, time:Int @max(amount:int) @min1)
    post: Post!
}


type Mutation {
    createUser(data: CreateUserInput!): User!
    deleteUser(id: ID!): User!
    updateUser(id: ID!, data: UpdateUserInput!): User! @exclude4(if:[boolean!]!) @authenticate4(email:String, password:String)
    createPost(data: CreatePostInput!): Post!
}

"""
Make a Subscription
"""
type Subscription {
    comment(postId: ID!): CommentSubscriptionPayload!
    post: PostSubscriptionPayload!
}
"""
Input for user creation
"""
input CreateUserInput {
    name: String!
    email: String!
    age: Int
}
"""
interface for user update
"""
interface UpdateUser {
    name: String
    email: String
    age: Int
}

"""
Make a SearchResult1
"""
extend union SearchResult1 = Photo | Person|asdf

extend union SearchResult2 @dir1(if:Boolean @dirIn1, then:String) =
  | Photo
  | Person


union SearchResult3 @dir2 =
  | Photo
  | Person
  | Page
"""
Make a SearchResult4
"""
union SearchResult4 @dir3 = Photo | Person
union SearchResult5 @dir4 = Photo | Person

"""
Time for scalar time
"""
scalar Time
extend scalar Url

"""
Time2 for scalar time
"""
extend scalar Time2 @dir5
scalar DateTime @dir6(if:Boolean, before:String @dirIn6(force:Boolean))

enum Direction {
  NORTH
  EAST
  SOUTH
  WEST
}
"""
extended Direction enum
"""
extend enum Direction @direnum1{
  NORTH @dirEnum2
  EAST
  SOUTH
  WEST
  CENTER @default(value: string @insideDefaultEnum)
}

directive @anotherExample3(arg: String @include) on ARGUMENT_DEFINITION

directive @example on FIELD_DEFINITION | ARGUMENT_DEFINITION  
"""
directive for example2
"""
directive @example2 on 
  | FIELD_DEFINITION 
  | ARGUMENT_DEFINITION  
  | SCHEMA