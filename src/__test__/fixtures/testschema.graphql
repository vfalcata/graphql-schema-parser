extend type Query implements dog & cat  @include1(if:boolean) @exclude1(if:[boolean!]!) {
    users(query: String): [User!]! @include2(if:boolean @require1)
    posts(available: Boolean @include3(if:boolean @authenticate1(email:String, password:String @exclude2(if:[boolean!]!)), from5:String @now1 @then1), query: String @authenticate2(email:String, password:String)): [Post!]! @include4(if:boolean)
    comments: [Comment!]! @authenticate3(email:String @require2, password:String @require3) @include5(if:boolean)
    me: User! @last1 @second1 @third(amount:Int, time:Int @max(amount:int) @min1)
    post: Post!
}


extend union SearchResult1 = Photo | Person|asdf

extend union SearchResultb @dir1(if:Boolean @dirIn1, then:String) =
  | Photo
  | Person


union SearchResultc @dir2 =
  | Photo
  | Person
  | Page

union SearchResult1 @dir3 = Photo | Person
union SearchResult2 @dir4 = Photo | Person

scalar Time
extend scalar Url
extend scalar Time2 @dir5
scalar DateTime @dir6(if:Boolean, before:String @dirIn6(force:Boolean))

enum Direction {
  NORTH
  EAST
  SOUTH
  WEST
}

extend enum Direction @direnum1{
  NORTH @dirEnum2
  EAST
  SOUTH
  WEST
  CENTER @default(value: string @insideDefaultEnum)
}

directive @anotherExample3(arg: String @include) on ARGUMENT_DEFINITION

directive @example on FIELD_DEFINITION | ARGUMENT_DEFINITION
directive @example2 on
  | FIELD
  | FRAGMENT_SPREAD
  | INLINE_FRAGMENT


directive @example3(exclude:boolean, types:[String!]! @include6 @force3(time:Int))on FIELD_DEFINITION | ARGUMENT_DEFINITION

directive @example4(last:boolean, fieldsValue:[String!]! @include8 @force4(time:Int, now:boolean))on 
|FIELD_DEFINITION 
| ARGUMENT_DEFINITION
  | INLINE_FRAGMENT

directive @anotherExample1(arg: String @include) on ARGUMENT_DEFINITION

type Mutation {
    createUser(data: CreateUserInput!): User!
    deleteUser(id: ID!): User!
    updateUser(id: ID!, data: UpdateUserInput!): User! @exclude(if:[boolean!]!) @authenticate(email:String, password:String)
    createPost(data: CreatePostInput!): Post!
    deletePost(id: ID!): Post!
    updatePost(id: ID!, data: UpdatePostInput!): Post!
    createComment(data: CreateCommentInput!): Comment!
    deleteComment(id: ID!): Comment!
    updateComment(id: ID!, data: UpdateCommentInput!): Comment!
}

type Subscription {
    comment(postId: ID!): CommentSubscriptionPayload!
    post: PostSubscriptionPayload!
}

input CreateUserInput {
    name: String!
    email: String!
    age: Int
}

input UpdateUserInput {
    name: String
    email: String
    age: Int
}

input CreatePostInput {
    title: String!
    body: String!
    published: Boolean!
    author: ID!
}

input UpdatePostInput {
    title: String
    body: String
    published: Boolean
}

input CreateCommentInput {
    text: String!
    author: ID!
    post: ID!
}

input UpdateCommentInput {
    text: String
}

type User {
    id: ID!
    name: String!
    email: String!
    age: Int
    posts: [Post!]!
    comments: [Comment!]!
}

type Post {
    id: ID!  @authenticate(email:String, password:String)
    title: String!
    body: String!
    published: Boolean!
    author: User!
    comments: [Comment!]!
}

type Comment {
    id: ID!
    text: String!
    author: User!
    post: Post!
}

enum MutationType {
    CREATED
    UPDATED
    DELETED
}

extend enum MutationType @authenticate(email:String, password:String) @exclude(if:[boolean!]!){
    CREATED
    UPDATED @include(if:[boolean!]!)
    DELETED
}

enum UserType @authenticate(email:String, password:String) @exclude(if:[boolean!]!){
    ADMIN
    CLIENT @include(if:[boolean!]!)
    VISITOR
}

type PostSubscriptionPayload {
    mutation: MutationType!
    data: Post!
}

type CommentSubscriptionPayload {
    mutation: MutationType!
    data: Comment!
}

interface NamedEntity {
  name: String
}

interface ValuedEntity {
  value: Int
}

type Person implements NamedEntity {
  name: String
  age: Int
}

type Business implements NamedEntity & ValuedEntity {
  name: String
  value: Int
  employeeCount: Int
}

extend interface NamedEntity {
  nickname: String
}

extend type Person {
  nickname: String
}

extend type Comment {
  upVotes: Int,
  downVotes: Int,
  censor: Boolean @authenticate(email:String, password:String) 
}

extend type Post @exclude(if:[boolean!]!) @authenticate(email:String, password:String) {
  upVotes: Int @include(if:boolean),
  downVotes: Int @include(if:boolean)
}

interface NamedEntity {
  name: String
}

interface ValuedEntity @order(of:String){
  value: Int
}

extend interface PostEntity @order(of:String) @authenticate(email:String, password:String){
  value: Int @calculate(of:String),
  id: ID!
}

type Person implements NamedEntity {
  name: String
  age: Int
}

type Business implements NamedEntity & ValuedEntity {
  name: String
  value: Int
  employeeCount: Int @include(if:boolean)
}

type Store implements NamedEntity & ValuedEntity @uniqueFields(fieldName:String, amount:Int){
  name: String
  value: Int
  location: String @include(if:boolean)
}